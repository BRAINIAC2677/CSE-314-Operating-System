diff --git a/Makefile b/Makefile
index b78a6a3..39a99d7 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/threadspinlock.o $U/threadmutex.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,7 +132,6 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index f4eee36..a3c962b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -10,188 +10,180 @@ struct stat;
 struct superblock;
 
 // bio.c
-void binit(void);
-struct buf *bread(uint, uint);
-void brelse(struct buf *);
-void bwrite(struct buf *);
-void bpin(struct buf *);
-void bunpin(struct buf *);
+void            binit(void);
+struct buf*     bread(uint, uint);
+void            brelse(struct buf*);
+void            bwrite(struct buf*);
+void            bpin(struct buf*);
+void            bunpin(struct buf*);
 
 // console.c
-void consoleinit(void);
-void consoleintr(int);
-void consputc(int);
+void            consoleinit(void);
+void            consoleintr(int);
+void            consputc(int);
 
 // exec.c
-int exec(char *, char **);
+int             exec(char*, char**);
 
 // file.c
-struct file *filealloc(void);
-void fileclose(struct file *);
-struct file *filedup(struct file *);
-void fileinit(void);
-int fileread(struct file *, uint64, int n);
-int filestat(struct file *, uint64 addr);
-int filewrite(struct file *, uint64, int n);
+struct file*    filealloc(void);
+void            fileclose(struct file*);
+struct file*    filedup(struct file*);
+void            fileinit(void);
+int             fileread(struct file*, uint64, int n);
+int             filestat(struct file*, uint64 addr);
+int             filewrite(struct file*, uint64, int n);
 
 // fs.c
-void fsinit(int);
-int dirlink(struct inode *, char *, uint);
-struct inode *dirlookup(struct inode *, char *, uint *);
-struct inode *ialloc(uint, short);
-struct inode *idup(struct inode *);
-void iinit();
-void ilock(struct inode *);
-void iput(struct inode *);
-void iunlock(struct inode *);
-void iunlockput(struct inode *);
-void iupdate(struct inode *);
-int namecmp(const char *, const char *);
-struct inode *namei(char *);
-struct inode *nameiparent(char *, char *);
-int readi(struct inode *, int, uint64, uint, uint);
-void stati(struct inode *, struct stat *);
-int writei(struct inode *, int, uint64, uint, uint);
-void itrunc(struct inode *);
+void            fsinit(int);
+int             dirlink(struct inode*, char*, uint);
+struct inode*   dirlookup(struct inode*, char*, uint*);
+struct inode*   ialloc(uint, short);
+struct inode*   idup(struct inode*);
+void            iinit();
+void            ilock(struct inode*);
+void            iput(struct inode*);
+void            iunlock(struct inode*);
+void            iunlockput(struct inode*);
+void            iupdate(struct inode*);
+int             namecmp(const char*, const char*);
+struct inode*   namei(char*);
+struct inode*   nameiparent(char*, char*);
+int             readi(struct inode*, int, uint64, uint, uint);
+void            stati(struct inode*, struct stat*);
+int             writei(struct inode*, int, uint64, uint, uint);
+void            itrunc(struct inode*);
 
 // ramdisk.c
-void ramdiskinit(void);
-void ramdiskintr(void);
-void ramdiskrw(struct buf *);
+void            ramdiskinit(void);
+void            ramdiskintr(void);
+void            ramdiskrw(struct buf*);
 
 // kalloc.c
-void *kalloc(void);
-void kfree(void *);
-void kinit(void);
+void*           kalloc(void);
+void            kfree(void *);
+void            kinit(void);
 
 // log.c
-void initlog(int, struct superblock *);
-void log_write(struct buf *);
-void begin_op(void);
-void end_op(void);
+void            initlog(int, struct superblock*);
+void            log_write(struct buf*);
+void            begin_op(void);
+void            end_op(void);
 
 // pipe.c
-int pipealloc(struct file **, struct file **);
-void pipeclose(struct pipe *, int);
-int piperead(struct pipe *, uint64, int);
-int pipewrite(struct pipe *, uint64, int);
+int             pipealloc(struct file**, struct file**);
+void            pipeclose(struct pipe*, int);
+int             piperead(struct pipe*, uint64, int);
+int             pipewrite(struct pipe*, uint64, int);
 
 // printf.c
-void printf(char *, ...);
-void panic(char *) __attribute__((noreturn));
-void printfinit(void);
+void            printf(char*, ...);
+void            panic(char*) __attribute__((noreturn));
+void            printfinit(void);
 
 // proc.c
-int cpuid(void);
-void exit(int);
-int thread_create(uint64, uint64, uint64);
-int thread_join(int);
-void thread_exit(void);
-int fork(void);
-int growproc(int);
-void proc_mapstacks(pagetable_t);
-pagetable_t proc_pagetable(struct proc *);
-void proc_freepagetable(pagetable_t, uint64);
-void thread_freepagetable(pagetable_t, uint64);
-int kill(int);
-int killed(struct proc *);
-void setkilled(struct proc *);
-struct cpu *mycpu(void);
-struct cpu *getmycpu(void);
-struct proc *myproc();
-void procinit(void);
-void scheduler(void) __attribute__((noreturn));
-void sched(void);
-void sleep(void *, struct spinlock *);
-void userinit(void);
-int wait(uint64);
-void wakeup(void *);
-void yield(void);
-int either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
-int either_copyin(void *dst, int user_src, uint64 src, uint64 len);
-void procdump(void);
+int             cpuid(void);
+void            exit(int);
+int             fork(void);
+int             growproc(int);
+void            proc_mapstacks(pagetable_t);
+pagetable_t     proc_pagetable(struct proc *);
+void            proc_freepagetable(pagetable_t, uint64);
+int             kill(int);
+int             killed(struct proc*);
+void            setkilled(struct proc*);
+struct cpu*     mycpu(void);
+struct cpu*     getmycpu(void);
+struct proc*    myproc();
+void            procinit(void);
+void            scheduler(void) __attribute__((noreturn));
+void            sched(void);
+void            sleep(void*, struct spinlock*);
+void            userinit(void);
+int             wait(uint64);
+void            wakeup(void*);
+void            yield(void);
+int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+void            procdump(void);
 
 // swtch.S
-void swtch(struct context *, struct context *);
+void            swtch(struct context*, struct context*);
 
 // spinlock.c
-void acquire(struct spinlock *);
-int holding(struct spinlock *);
-void initlock(struct spinlock *, char *);
-void release(struct spinlock *);
-void push_off(void);
-void pop_off(void);
+void            acquire(struct spinlock*);
+int             holding(struct spinlock*);
+void            initlock(struct spinlock*, char*);
+void            release(struct spinlock*);
+void            push_off(void);
+void            pop_off(void);
 
 // sleeplock.c
-void acquiresleep(struct sleeplock *);
-void releasesleep(struct sleeplock *);
-int holdingsleep(struct sleeplock *);
-void initsleeplock(struct sleeplock *, char *);
+void            acquiresleep(struct sleeplock*);
+void            releasesleep(struct sleeplock*);
+int             holdingsleep(struct sleeplock*);
+void            initsleeplock(struct sleeplock*, char*);
 
 // string.c
-int memcmp(const void *, const void *, uint);
-void *memmove(void *, const void *, uint);
-void *memset(void *, int, uint);
-char *safestrcpy(char *, const char *, int);
-int strlen(const char *);
-int strncmp(const char *, const char *, uint);
-char *strncpy(char *, const char *, int);
+int             memcmp(const void*, const void*, uint);
+void*           memmove(void*, const void*, uint);
+void*           memset(void*, int, uint);
+char*           safestrcpy(char*, const char*, int);
+int             strlen(const char*);
+int             strncmp(const char*, const char*, uint);
+char*           strncpy(char*, const char*, int);
 
 // syscall.c
-void argint(int, int *);
-int argstr(int, char *, int);
-void argaddr(int, uint64 *);
-int fetchstr(uint64, char *, int);
-int fetchaddr(uint64, uint64 *);
-void syscall();
+void            argint(int, int*);
+int             argstr(int, char*, int);
+void            argaddr(int, uint64 *);
+int             fetchstr(uint64, char*, int);
+int             fetchaddr(uint64, uint64*);
+void            syscall();
 
 // trap.c
-extern uint ticks;
-void trapinit(void);
-void trapinithart(void);
+extern uint     ticks;
+void            trapinit(void);
+void            trapinithart(void);
 extern struct spinlock tickslock;
-void usertrapret(void);
+void            usertrapret(void);
 
 // uart.c
-void uartinit(void);
-void uartintr(void);
-void uartputc(int);
-void uartputc_sync(int);
-int uartgetc(void);
+void            uartinit(void);
+void            uartintr(void);
+void            uartputc(int);
+void            uartputc_sync(int);
+int             uartgetc(void);
 
 // vm.c
-void kvminit(void);
-void kvminithart(void);
-void kvmmap(pagetable_t, uint64, uint64, uint64, int);
-int mappages(pagetable_t, uint64, uint64, uint64, int);
-pagetable_t uvmcreate(void);
-void uvmfirst(pagetable_t, uchar *, uint);
-uint64 uvmalloc(pagetable_t, uint64, uint64, int);
-uint64 uvmdealloc(pagetable_t, uint64, uint64);
-uint64 thread_uvmdealloc(pagetable_t, uint64, uint64);
-int uvmcopy(pagetable_t, pagetable_t, uint64);
-int uvmmirror(pagetable_t, pagetable_t, uint64);
-int uvmrangemirror(pagetable_t, pagetable_t, uint64, uint64);
-void uvmfree(pagetable_t, uint64);
-void thread_uvmfree(pagetable_t, uint64);
-void uvmunmap(pagetable_t, uint64, uint64, int);
-void uvmclear(pagetable_t, uint64);
-pte_t *walk(pagetable_t, uint64, int);
-uint64 walkaddr(pagetable_t, uint64);
-int copyout(pagetable_t, uint64, char *, uint64);
-int copyin(pagetable_t, char *, uint64, uint64);
-int copyinstr(pagetable_t, char *, uint64, uint64);
+void            kvminit(void);
+void            kvminithart(void);
+void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
+int             mappages(pagetable_t, uint64, uint64, uint64, int);
+pagetable_t     uvmcreate(void);
+void            uvmfirst(pagetable_t, uchar *, uint);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int);
+uint64          uvmdealloc(pagetable_t, uint64, uint64);
+int             uvmcopy(pagetable_t, pagetable_t, uint64);
+void            uvmfree(pagetable_t, uint64);
+void            uvmunmap(pagetable_t, uint64, uint64, int);
+void            uvmclear(pagetable_t, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
+uint64          walkaddr(pagetable_t, uint64);
+int             copyout(pagetable_t, uint64, char *, uint64);
+int             copyin(pagetable_t, char *, uint64, uint64);
+int             copyinstr(pagetable_t, char *, uint64, uint64);
 
 // plic.c
-void plicinit(void);
-void plicinithart(void);
-int plic_claim(void);
-void plic_complete(int);
+void            plicinit(void);
+void            plicinithart(void);
+int             plic_claim(void);
+void            plic_complete(int);
 
 // virtio_disk.c
-void virtio_disk_init(void);
-void virtio_disk_rw(struct buf *, int);
-void virtio_disk_intr(void);
+void            virtio_disk_init(void);
+void            virtio_disk_rw(struct buf *, int);
+void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x) / sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/proc.c b/kernel/proc.c
index b5a081d..959b778 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,14 +9,11 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
-struct spinlock mem_locks[NPROC];
 
 struct proc *initproc;
 
 int nextpid = 1;
-int nextmem_id = 1;
 struct spinlock pid_lock;
-struct spinlock mem_id_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -32,40 +29,40 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void proc_mapstacks(pagetable_t kpgtbl)
+void
+proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-
-  for (p = proc; p < &proc[NPROC]; p++)
-  {
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
     char *pa = kalloc();
-    if (pa == 0)
+    if(pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int)(p - proc));
+    uint64 va = KSTACK((int) (p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
 // initialize the proc table.
-void procinit(void)
+void
+procinit(void)
 {
   struct proc *p;
-
+  
   initlock(&pid_lock, "nextpid");
-  initlock(&mem_id_lock, "nextmem_id");
   initlock(&wait_lock, "wait_lock");
-  for (p = proc; p < &proc[NPROC]; p++)
-  {
-    initlock(&p->lock, "proc");
-    p->state = UNUSED;
-    p->kstack = KSTACK((int)(p - proc));
+  for(p = proc; p < &proc[NPROC]; p++) {
+      initlock(&p->lock, "proc");
+      p->state = UNUSED;
+      p->kstack = KSTACK((int) (p - proc));
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int cpuid()
+int
+cpuid()
 {
   int id = r_tp();
   return id;
@@ -73,7 +70,7 @@ int cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu *
+struct cpu*
 mycpu(void)
 {
   int id = cpuid();
@@ -82,7 +79,7 @@ mycpu(void)
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc *
+struct proc*
 myproc(void)
 {
   push_off();
@@ -92,10 +89,11 @@ myproc(void)
   return p;
 }
 
-int allocpid()
+int
+allocpid()
 {
   int pid;
-
+  
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -104,38 +102,20 @@ int allocpid()
   return pid;
 }
 
-int allocmem_id()
-{
-  int mem_id;
-
-  acquire(&mem_id_lock);
-  mem_id = nextmem_id;
-  nextmem_id = nextmem_id + 1;
-  release(&mem_id_lock);
-
-  return mem_id;
-}
-
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc *
+static struct proc*
 allocproc(void)
 {
-  int i;
   struct proc *p;
 
-  for (i = 0, p = proc; p < &proc[NPROC]; p++, i++)
-  {
+  for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
-    if (p->state == UNUSED)
-    {
-      p->mem_lock = &mem_locks[i];
+    if(p->state == UNUSED) {
       goto found;
-    }
-    else
-    {
+    } else {
       release(&p->lock);
     }
   }
@@ -143,13 +123,10 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
-  p->mem_id = allocmem_id();
-  initlock(p->mem_lock, "mem_lock");
   p->state = USED;
 
   // Allocate a trapframe page.
-  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
-  {
+  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -157,8 +134,7 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if (p->pagetable == 0)
-  {
+  if(p->pagetable == 0){
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -179,20 +155,11 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if (p->trapframe)
-    kfree((void *)p->trapframe);
+  if(p->trapframe)
+    kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if (p->pagetable)
-  {
-    if (p->is_thread)
-    {
-      thread_freepagetable(p->pagetable, p->sz);
-    }
-    else
-    {
-      proc_freepagetable(p->pagetable, p->sz);
-    }
-  }
+  if(p->pagetable)
+    proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -213,25 +180,23 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if (pagetable == 0)
+  if(pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
-               (uint64)trampoline, PTE_R | PTE_X) < 0)
-  {
+  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
+              (uint64)trampoline, PTE_R | PTE_X) < 0){
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if (mappages(pagetable, TRAPFRAME, PGSIZE,
-               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
-  {
+  if(mappages(pagetable, TRAPFRAME, PGSIZE,
+              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -242,50 +207,44 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void
+proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
 }
 
-// Free a process's page table, and free the
-// physical memory it refers to.
-void thread_freepagetable(pagetable_t pagetable, uint64 sz)
-{
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  thread_uvmfree(pagetable, sz);
-}
-
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
 uchar initcode[] = {
-    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00};
+  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00
+};
 
 // Set up first user process.
-void userinit(void)
+void
+userinit(void)
 {
   struct proc *p;
 
   p = allocproc();
   initproc = p;
-
+  
   // allocate one user page and copy initcode's instructions
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;     // user program counter
-  p->trapframe->sp = PGSIZE; // user stack pointer
+  p->trapframe->epc = 0;      // user program counter
+  p->trapframe->sp = PGSIZE;  // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -297,193 +256,40 @@ void userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int growproc(int n)
+int
+growproc(int n)
 {
-  int pmem_id;
   uint64 sz;
-  struct proc *pp;
   struct proc *p = myproc();
 
-  acquire(&p->lock);
-  pmem_id = p->mem_id;
-  release(&p->lock);
-
-  acquire(p->mem_lock);
   sz = p->sz;
-  if (n > 0)
-  {
-    uint64 oldsz = sz;
-    if ((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0)
-    {
+  if(n > 0){
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
-    uint64 newsz = sz;
-
-    for (pp = proc; pp < &proc[NPROC]; pp++)
-    {
-      acquire(&pp->lock);
-      if (p != pp && pp->mem_id == pmem_id)
-      {
-        if (uvmrangemirror(p->pagetable, pp->pagetable, oldsz, newsz) < 0)
-        {
-          return -1;
-        }
-        pp->sz = newsz;
-      }
-      release(&pp->lock);
-    }
-  }
-  else if (n < 0)
-  {
-    uint64 oldsz = sz;
+  } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
-
-    for (pp = proc; pp < &proc[NPROC]; pp++)
-    {
-      acquire(&pp->lock);
-      if (p != pp && pp->mem_id == pmem_id)
-      {
-        pp->sz = thread_uvmdealloc(pp->pagetable, oldsz, oldsz + n);
-      }
-      release(&pp->lock);
-    }
   }
   p->sz = sz;
-  release(p->mem_lock);
-
   return 0;
 }
 
-int thread_create(uint64 _fcn, uint64 _arg, uint64 _stack)
-{
-  int i, pid;
-  struct proc *np;
-  struct proc *p = myproc();
-
-  // Allocate process.
-  if ((np = allocproc()) == 0)
-  {
-    return -1;
-  }
-
-  // Copy user memory from parent to child.
-  if (uvmmirror(p->pagetable, np->pagetable, p->sz) < 0)
-  {
-    freeproc(np);
-    release(&np->lock);
-    return -1;
-  }
-  np->sz = p->sz;
-
-  // copy saved user registers.
-  *(np->trapframe) = *(p->trapframe);
-
-  // Cause fork to return 0 in the child.
-  np->trapframe->a0 = _arg;
-  np->trapframe->epc = _fcn;
-
-  np->trapframe->sp = _stack + PGSIZE;
-
-  // increment reference counts on open file descriptors.
-  for (i = 0; i < NOFILE; i++)
-    if (p->ofile[i])
-      np->ofile[i] = filedup(p->ofile[i]);
-  np->cwd = idup(p->cwd);
-
-  safestrcpy(np->name, p->name, sizeof(p->name));
-
-  pid = np->pid;
-
-  release(&np->lock);
-
-  acquire(&wait_lock);
-  np->parent = p;
-  np->is_thread = 1;
-  release(&wait_lock);
-
-  int pmem_id;
-  struct spinlock *pmem_lock;
-  acquire(&p->lock);
-  pmem_id = p->mem_id;
-  pmem_lock = p->mem_lock;
-  release(&p->lock);
-
-  acquire(&np->lock);
-  np->state = RUNNABLE;
-  np->mem_id = pmem_id;
-  np->mem_lock = pmem_lock;
-  release(&np->lock);
-
-  return pid;
-}
-
-int thread_join(int _thread_id)
-{
-  struct proc *pp;
-  int havekids, pid;
-  struct proc *p = myproc();
-
-  acquire(&wait_lock);
-
-  for (;;)
-  {
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for (pp = proc; pp < &proc[NPROC]; pp++)
-    {
-      if (pp->parent == p && pp->is_thread)
-      {
-        // make sure the child isn't still in exit() or swtch().
-        acquire(&pp->lock);
-
-        havekids = 1;
-        if (pp->state == ZOMBIE)
-        {
-          // Found one.
-          pid = pp->pid;
-          freeproc(pp);
-          release(&pp->lock);
-          release(&wait_lock);
-          return pid;
-        }
-        release(&pp->lock);
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if (!havekids || killed(p))
-    {
-      release(&wait_lock);
-      return -1;
-    }
-
-    // Wait for a child to exit.
-    sleep(p, &wait_lock); // DOC: wait-sleep
-  }
-}
-
-void thread_exit(void)
-{
-  exit(0);
-}
-
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int fork(void)
+int
+fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if ((np = allocproc()) == 0)
-  {
+  if((np = allocproc()) == 0){
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
-  {
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
@@ -497,8 +303,8 @@ int fork(void)
   np->trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for (i = 0; i < NOFILE; i++)
-    if (p->ofile[i])
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -521,14 +327,13 @@ int fork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void reparent(struct proc *p)
+void
+reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for (pp = proc; pp < &proc[NPROC]; pp++)
-  {
-    if (pp->parent == p)
-    {
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp->parent == p){
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -538,18 +343,17 @@ void reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void exit(int status)
+void
+exit(int status)
 {
   struct proc *p = myproc();
 
-  if (p == initproc)
+  if(p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for (int fd = 0; fd < NOFILE; fd++)
-  {
-    if (p->ofile[fd])
-    {
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -568,7 +372,7 @@ void exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-
+  
   acquire(&p->lock);
 
   p->xstate = status;
@@ -583,7 +387,8 @@ void exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int wait(uint64 addr)
+int
+wait(uint64 addr)
 {
   struct proc *pp;
   int havekids, pid;
@@ -591,25 +396,20 @@ int wait(uint64 addr)
 
   acquire(&wait_lock);
 
-  for (;;)
-  {
+  for(;;){
     // Scan through table looking for exited children.
     havekids = 0;
-    for (pp = proc; pp < &proc[NPROC]; pp++)
-    {
-      if (pp->parent == p)
-      {
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
-        if (pp->state == ZOMBIE)
-        {
+        if(pp->state == ZOMBIE){
           // Found one.
           pid = pp->pid;
-          if (addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                   sizeof(pp->xstate)) < 0)
-          {
+          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                  sizeof(pp->xstate)) < 0) {
             release(&pp->lock);
             release(&wait_lock);
             return -1;
@@ -624,14 +424,13 @@ int wait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if (!havekids || killed(p))
-    {
+    if(!havekids || killed(p)){
       release(&wait_lock);
       return -1;
     }
-
+    
     // Wait for a child to exit.
-    sleep(p, &wait_lock); // DOC: wait-sleep
+    sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
 
@@ -642,22 +441,20 @@ int wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void scheduler(void)
+void
+scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-
+  
   c->proc = 0;
-  for (;;)
-  {
+  for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for (p = proc; p < &proc[NPROC]; p++)
-    {
+    for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if (p->state == RUNNABLE)
-      {
+      if(p->state == RUNNABLE) {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -681,18 +478,19 @@ void scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void sched(void)
+void
+sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if (!holding(&p->lock))
+  if(!holding(&p->lock))
     panic("sched p->lock");
-  if (mycpu()->noff != 1)
+  if(mycpu()->noff != 1)
     panic("sched locks");
-  if (p->state == RUNNING)
+  if(p->state == RUNNING)
     panic("sched running");
-  if (intr_get())
+  if(intr_get())
     panic("sched interruptible");
 
   intena = mycpu()->intena;
@@ -701,7 +499,8 @@ void sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void yield(void)
+void
+yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
@@ -712,15 +511,15 @@ void yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void forkret(void)
+void
+forkret(void)
 {
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
-  if (first)
-  {
+  if (first) {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -733,10 +532,11 @@ void forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void sleep(void *chan, struct spinlock *lk)
+void
+sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-
+  
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -744,7 +544,7 @@ void sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock); // DOC: sleeplock1
+  acquire(&p->lock);  //DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
@@ -763,17 +563,15 @@ void sleep(void *chan, struct spinlock *lk)
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
-void wakeup(void *chan)
+void
+wakeup(void *chan)
 {
   struct proc *p;
 
-  for (p = proc; p < &proc[NPROC]; p++)
-  {
-    if (p != myproc())
-    {
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
       acquire(&p->lock);
-      if (p->state == SLEEPING && p->chan == chan)
-      {
+      if(p->state == SLEEPING && p->chan == chan) {
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -784,18 +582,16 @@ void wakeup(void *chan)
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int kill(int pid)
+int
+kill(int pid)
 {
   struct proc *p;
 
-  for (p = proc; p < &proc[NPROC]; p++)
-  {
+  for(p = proc; p < &proc[NPROC]; p++){
     acquire(&p->lock);
-    if (p->pid == pid)
-    {
+    if(p->pid == pid){
       p->killed = 1;
-      if (p->state == SLEEPING)
-      {
+      if(p->state == SLEEPING){
         // Wake process from sleep().
         p->state = RUNNABLE;
       }
@@ -807,17 +603,19 @@ int kill(int pid)
   return -1;
 }
 
-void setkilled(struct proc *p)
+void
+setkilled(struct proc *p)
 {
   acquire(&p->lock);
   p->killed = 1;
   release(&p->lock);
 }
 
-int killed(struct proc *p)
+int
+killed(struct proc *p)
 {
   int k;
-
+  
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -827,15 +625,13 @@ int killed(struct proc *p)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int
+either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if (user_dst)
-  {
+  if(user_dst){
     return copyout(p->pagetable, dst, src, len);
-  }
-  else
-  {
+  } else {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -844,16 +640,14 @@ int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int
+either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if (user_src)
-  {
+  if(user_src){
     return copyin(p->pagetable, dst, src, len);
-  }
-  else
-  {
-    memmove(dst, (char *)src, len);
+  } else {
+    memmove(dst, (char*)src, len);
     return 0;
   }
 }
@@ -861,24 +655,25 @@ int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void procdump(void)
+void
+procdump(void)
 {
   static char *states[] = {
-      [UNUSED] "unused",
-      [USED] "used",
-      [SLEEPING] "sleep ",
-      [RUNNABLE] "runble",
-      [RUNNING] "run   ",
-      [ZOMBIE] "zombie"};
+  [UNUSED]    "unused",
+  [USED]      "used",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
   struct proc *p;
   char *state;
 
   printf("\n");
-  for (p = proc; p < &proc[NPROC]; p++)
-  {
-    if (p->state == UNUSED)
+  for(p = proc; p < &proc[NPROC]; p++){
+    if(p->state == UNUSED)
       continue;
-    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
diff --git a/kernel/proc.h b/kernel/proc.h
index 935119b..d021857 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,6 +1,5 @@
 // Saved registers for kernel context switches.
-struct context
-{
+struct context {
   uint64 ra;
   uint64 sp;
 
@@ -20,12 +19,11 @@ struct context
 };
 
 // Per-CPU state.
-struct cpu
-{
-  struct proc *proc;      // The process running on this cpu, or null.
-  struct context context; // swtch() here to enter scheduler().
-  int noff;               // Depth of push_off() nesting.
-  int intena;             // Were interrupts enabled before push_off()?
+struct cpu {
+  struct proc *proc;          // The process running on this cpu, or null.
+  struct context context;     // swtch() here to enter scheduler().
+  int noff;                   // Depth of push_off() nesting.
+  int intena;                 // Were interrupts enabled before push_off()?
 };
 
 extern struct cpu cpus[NCPU];
@@ -42,8 +40,7 @@ extern struct cpu cpus[NCPU];
 // the trapframe includes callee-saved user registers like s0-s11 because the
 // return-to-user path via usertrapret() doesn't return through
 // the entire kernel call stack.
-struct trapframe
-{
+struct trapframe {
   /*   0 */ uint64 kernel_satp;   // kernel page table
   /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
   /*  16 */ uint64 kernel_trap;   // usertrap()
@@ -82,33 +79,21 @@ struct trapframe
   /* 280 */ uint64 t6;
 };
 
-enum procstate
-{
-  UNUSED,
-  USED,
-  SLEEPING,
-  RUNNABLE,
-  RUNNING,
-  ZOMBIE
-};
+enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
-struct proc
-{
+struct proc {
   struct spinlock lock;
-  struct spinlock *mem_lock;
 
   // p->lock must be held when using these:
-  enum procstate state; // Process state
-  void *chan;           // If non-zero, sleeping on chan
-  int killed;           // If non-zero, have been killed
-  int xstate;           // Exit status to be returned to parent's wait
-  int pid;              // Process ID
-  int mem_id;
+  enum procstate state;        // Process state
+  void *chan;                  // If non-zero, sleeping on chan
+  int killed;                  // If non-zero, have been killed
+  int xstate;                  // Exit status to be returned to parent's wait
+  int pid;                     // Process ID
 
   // wait_lock must be held when using this:
-  struct proc *parent; // Parent process
-  int is_thread;
+  struct proc *parent;         // Parent process
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 295ac5d..4392820 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,9 +1,9 @@
 // Mutual exclusion lock.
-struct spinlock
-{
-  uint locked; // Is the lock held?
+struct spinlock {
+  uint locked;       // Is the lock held?
 
   // For debugging:
-  char *name;      // Name of lock.
-  struct cpu *cpu; // The cpu holding the lock.
+  char *name;        // Name of lock.
+  struct cpu *cpu;   // The cpu holding the lock.
 };
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ccf9a48..ed65409 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -8,22 +8,24 @@
 #include "defs.h"
 
 // Fetch the uint64 at addr from the current process.
-int fetchaddr(uint64 addr, uint64 *ip)
+int
+fetchaddr(uint64 addr, uint64 *ip)
 {
   struct proc *p = myproc();
-  if (addr >= p->sz || addr + sizeof(uint64) > p->sz) // both tests needed, in case of overflow
+  if(addr >= p->sz || addr+sizeof(uint64) > p->sz) // both tests needed, in case of overflow
     return -1;
-  if (copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
+  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
     return -1;
   return 0;
 }
 
 // Fetch the nul-terminated string at addr from the current process.
 // Returns length of string, not including nul, or -1 for error.
-int fetchstr(uint64 addr, char *buf, int max)
+int
+fetchstr(uint64 addr, char *buf, int max)
 {
   struct proc *p = myproc();
-  if (copyinstr(p->pagetable, buf, addr, max) < 0)
+  if(copyinstr(p->pagetable, buf, addr, max) < 0)
     return -1;
   return strlen(buf);
 }
@@ -32,8 +34,7 @@ static uint64
 argraw(int n)
 {
   struct proc *p = myproc();
-  switch (n)
-  {
+  switch (n) {
   case 0:
     return p->trapframe->a0;
   case 1:
@@ -52,7 +53,8 @@ argraw(int n)
 }
 
 // Fetch the nth 32-bit system call argument.
-void argint(int n, int *ip)
+void
+argint(int n, int *ip)
 {
   *ip = argraw(n);
 }
@@ -60,7 +62,8 @@ void argint(int n, int *ip)
 // Retrieve an argument as a pointer.
 // Doesn't check for legality, since
 // copyin/copyout will do that.
-void argaddr(int n, uint64 *ip)
+void
+argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
 }
@@ -68,7 +71,8 @@ void argaddr(int n, uint64 *ip)
 // Fetch the nth word-sized system call argument as a null-terminated string.
 // Copies into buf, at most max.
 // Returns string length if OK (including nul), -1 if error.
-int argstr(int n, char *buf, int max)
+int
+argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
@@ -97,55 +101,47 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-extern uint64 sys_thread_create(void);
-extern uint64 sys_thread_join(void);
-extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-    [SYS_fork] sys_fork,
-    [SYS_exit] sys_exit,
-    [SYS_wait] sys_wait,
-    [SYS_pipe] sys_pipe,
-    [SYS_read] sys_read,
-    [SYS_kill] sys_kill,
-    [SYS_exec] sys_exec,
-    [SYS_fstat] sys_fstat,
-    [SYS_chdir] sys_chdir,
-    [SYS_dup] sys_dup,
-    [SYS_getpid] sys_getpid,
-    [SYS_sbrk] sys_sbrk,
-    [SYS_sleep] sys_sleep,
-    [SYS_uptime] sys_uptime,
-    [SYS_open] sys_open,
-    [SYS_write] sys_write,
-    [SYS_mknod] sys_mknod,
-    [SYS_unlink] sys_unlink,
-    [SYS_link] sys_link,
-    [SYS_mkdir] sys_mkdir,
-    [SYS_close] sys_close,
-    [SYS_thread_create] sys_thread_create,
-    [SYS_thread_join] sys_thread_join,
-    [SYS_thread_exit] sys_thread_exit,
+[SYS_fork]    sys_fork,
+[SYS_exit]    sys_exit,
+[SYS_wait]    sys_wait,
+[SYS_pipe]    sys_pipe,
+[SYS_read]    sys_read,
+[SYS_kill]    sys_kill,
+[SYS_exec]    sys_exec,
+[SYS_fstat]   sys_fstat,
+[SYS_chdir]   sys_chdir,
+[SYS_dup]     sys_dup,
+[SYS_getpid]  sys_getpid,
+[SYS_sbrk]    sys_sbrk,
+[SYS_sleep]   sys_sleep,
+[SYS_uptime]  sys_uptime,
+[SYS_open]    sys_open,
+[SYS_write]   sys_write,
+[SYS_mknod]   sys_mknod,
+[SYS_unlink]  sys_unlink,
+[SYS_link]    sys_link,
+[SYS_mkdir]   sys_mkdir,
+[SYS_close]   sys_close,
 };
 
-void syscall(void)
+void
+syscall(void)
 {
   int num;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if (num > 0 && num < NELEM(syscalls) && syscalls[num])
-  {
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
-  }
-  else
-  {
+  } else {
     printf("%d %s: unknown sys call %d\n",
-           p->pid, p->name, num);
+            p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 6d7bc12..bc5f356 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,25 +1,22 @@
 // System call numbers
-#define SYS_fork 1
-#define SYS_exit 2
-#define SYS_wait 3
-#define SYS_pipe 4
-#define SYS_read 5
-#define SYS_kill 6
-#define SYS_exec 7
-#define SYS_fstat 8
-#define SYS_chdir 9
-#define SYS_dup 10
+#define SYS_fork    1
+#define SYS_exit    2
+#define SYS_wait    3
+#define SYS_pipe    4
+#define SYS_read    5
+#define SYS_kill    6
+#define SYS_exec    7
+#define SYS_fstat   8
+#define SYS_chdir   9
+#define SYS_dup    10
 #define SYS_getpid 11
-#define SYS_sbrk 12
-#define SYS_sleep 13
+#define SYS_sbrk   12
+#define SYS_sleep  13
 #define SYS_uptime 14
-#define SYS_open 15
-#define SYS_write 16
-#define SYS_mknod 17
+#define SYS_open   15
+#define SYS_write  16
+#define SYS_mknod  17
 #define SYS_unlink 18
-#define SYS_link 19
-#define SYS_mkdir 20
-#define SYS_close 21
-#define SYS_thread_create 22
-#define SYS_thread_join 23
-#define SYS_thread_exit 24
+#define SYS_link   19
+#define SYS_mkdir  20
+#define SYS_close  21
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 4bf20b3..1de184e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -12,7 +12,7 @@ sys_exit(void)
   int n;
   argint(0, &n);
   exit(n);
-  return 0; // not reached
+  return 0;  // not reached
 }
 
 uint64
@@ -21,31 +21,6 @@ sys_getpid(void)
   return myproc()->pid;
 }
 
-uint64
-sys_thread_create(void)
-{
-  uint64 _fcn, _arg, _stack;
-  argaddr(0, &_fcn);
-  argaddr(1, &_arg);
-  argaddr(2, &_stack);
-  return thread_create(_fcn, _arg, _stack);
-}
-
-uint64
-sys_thread_join(void)
-{
-  int _thread_id;
-  argint(0, &_thread_id);
-  return thread_join(_thread_id);
-}
-
-uint64
-sys_thread_exit(void)
-{
-  thread_exit();
-  return 0; // not reached
-}
-
 uint64
 sys_fork(void)
 {
@@ -68,7 +43,7 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if (growproc(n) < 0)
+  if(growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -82,10 +57,8 @@ sys_sleep(void)
   argint(0, &n);
   acquire(&tickslock);
   ticks0 = ticks;
-  while (ticks - ticks0 < n)
-  {
-    if (killed(myproc()))
-    {
+  while(ticks - ticks0 < n){
+    if(killed(myproc())){
       release(&tickslock);
       return -1;
     }
diff --git a/kernel/vm.c b/kernel/vm.c
index 92d4a37..9f69783 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -11,7 +11,7 @@
  */
 pagetable_t kernel_pagetable;
 
-extern char etext[]; // kernel.ld sets this to end of kernel code.
+extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
@@ -21,7 +21,7 @@ kvmmake(void)
 {
   pagetable_t kpgtbl;
 
-  kpgtbl = (pagetable_t)kalloc();
+  kpgtbl = (pagetable_t) kalloc();
   memset(kpgtbl, 0, PGSIZE);
 
   // uart registers
@@ -34,10 +34,10 @@ kvmmake(void)
   kvmmap(kpgtbl, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
 
   // map kernel text executable and read-only.
-  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);
+  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
 
   // map kernel data and the physical RAM we'll make use of.
-  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
+  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
 
   // map the trampoline for trap entry/exit to
   // the highest virtual address in the kernel.
@@ -45,19 +45,21 @@ kvmmake(void)
 
   // allocate and map a kernel stack for each process.
   proc_mapstacks(kpgtbl);
-
+  
   return kpgtbl;
 }
 
 // Initialize the one kernel_pagetable
-void kvminit(void)
+void
+kvminit(void)
 {
   kernel_pagetable = kvmmake();
 }
 
 // Switch h/w page table register to the kernel's page table,
 // and enable paging.
-void kvminithart()
+void
+kvminithart()
 {
   // wait for any previous writes to the page table memory to finish.
   sfence_vma();
@@ -83,19 +85,15 @@ void kvminithart()
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
-  if (va >= MAXVA)
+  if(va >= MAXVA)
     panic("walk");
 
-  for (int level = 2; level > 0; level--)
-  {
+  for(int level = 2; level > 0; level--) {
     pte_t *pte = &pagetable[PX(level, va)];
-    if (*pte & PTE_V)
-    {
+    if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
-    }
-    else
-    {
-      if (!alloc || (pagetable = (pde_t *)kalloc()) == 0)
+    } else {
+      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
         return 0;
       memset(pagetable, 0, PGSIZE);
       *pte = PA2PTE(pagetable) | PTE_V;
@@ -113,15 +111,15 @@ walkaddr(pagetable_t pagetable, uint64 va)
   pte_t *pte;
   uint64 pa;
 
-  if (va >= MAXVA)
+  if(va >= MAXVA)
     return 0;
 
   pte = walk(pagetable, va, 0);
-  if (pte == 0)
+  if(pte == 0)
     return 0;
-  if ((*pte & PTE_V) == 0)
+  if((*pte & PTE_V) == 0)
     return 0;
-  if ((*pte & PTE_U) == 0)
+  if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
   return pa;
@@ -130,9 +128,10 @@ walkaddr(pagetable_t pagetable, uint64 va)
 // add a mapping to the kernel page table.
 // only used when booting.
 // does not flush TLB or enable paging.
-void kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
+void
+kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 {
-  if (mappages(kpgtbl, va, sz, pa, perm) != 0)
+  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
     panic("kvmmap");
 }
 
@@ -140,24 +139,24 @@ void kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 // physical addresses starting at pa. va and size might not
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
 // allocate a needed page-table page.
-int mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+int
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 {
   uint64 a, last;
   pte_t *pte;
 
-  if (size == 0)
+  if(size == 0)
     panic("mappages: size");
-
+  
   a = PGROUNDDOWN(va);
   last = PGROUNDDOWN(va + size - 1);
-  for (;;)
-  {
-    if ((pte = walk(pagetable, a, 1)) == 0)
+  for(;;){
+    if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
-    if (*pte & PTE_V)
+    if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
-    if (a == last)
+    if(a == last)
       break;
     a += PGSIZE;
     pa += PGSIZE;
@@ -168,26 +167,25 @@ int mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // Remove npages of mappings starting from va. va must be
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
-void uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+void
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 {
   uint64 a;
   pte_t *pte;
 
-  if ((va % PGSIZE) != 0)
+  if((va % PGSIZE) != 0)
     panic("uvmunmap: not aligned");
 
-  for (a = va; a < va + npages * PGSIZE; a += PGSIZE)
-  {
-    if ((pte = walk(pagetable, a, 0)) == 0)
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if ((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0)
       panic("uvmunmap: not mapped");
-    if (PTE_FLAGS(*pte) == PTE_V)
+    if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
-    if (do_free)
-    {
+    if(do_free){
       uint64 pa = PTE2PA(*pte);
-      kfree((void *)pa);
+      kfree((void*)pa);
     }
     *pte = 0;
   }
@@ -199,8 +197,8 @@ pagetable_t
 uvmcreate()
 {
   pagetable_t pagetable;
-  pagetable = (pagetable_t)kalloc();
-  if (pagetable == 0)
+  pagetable = (pagetable_t) kalloc();
+  if(pagetable == 0)
     return 0;
   memset(pagetable, 0, PGSIZE);
   return pagetable;
@@ -209,15 +207,16 @@ uvmcreate()
 // Load the user initcode into address 0 of pagetable,
 // for the very first process.
 // sz must be less than a page.
-void uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
+void
+uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 {
   char *mem;
 
-  if (sz >= PGSIZE)
+  if(sz >= PGSIZE)
     panic("uvmfirst: more than a page");
   mem = kalloc();
   memset(mem, 0, PGSIZE);
-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W | PTE_R | PTE_X | PTE_U);
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
   memmove(mem, src, sz);
 }
 
@@ -229,21 +228,18 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   char *mem;
   uint64 a;
 
-  if (newsz < oldsz)
+  if(newsz < oldsz)
     return oldsz;
 
   oldsz = PGROUNDUP(oldsz);
-  for (a = oldsz; a < newsz; a += PGSIZE)
-  {
+  for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
-    if (mem == 0)
-    {
+    if(mem == 0){
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if (mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R | PTE_U | xperm) != 0)
-    {
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
       uvmdealloc(pagetable, a, oldsz);
       return 0;
@@ -259,11 +255,10 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 uint64
 uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 {
-  if (newsz >= oldsz)
+  if(newsz >= oldsz)
     return oldsz;
 
-  if (PGROUNDUP(newsz) < PGROUNDUP(oldsz))
-  {
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
     uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
   }
@@ -271,63 +266,33 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
-// Deallocate user pages to bring the process size from oldsz to
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-uint64
-thread_uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
-{
-  if (newsz >= oldsz)
-    return oldsz;
-
-  if (PGROUNDUP(newsz) < PGROUNDUP(oldsz))
-  {
-    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
-  }
-
-  return newsz;
-}
-
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
-void freewalk(pagetable_t pagetable)
+void
+freewalk(pagetable_t pagetable)
 {
   // there are 2^9 = 512 PTEs in a page table.
-  for (int i = 0; i < 512; i++)
-  {
+  for(int i = 0; i < 512; i++){
     pte_t pte = pagetable[i];
-    if ((pte & PTE_V) && (pte & (PTE_R | PTE_W | PTE_X)) == 0)
-    {
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
       // this PTE points to a lower-level page table.
       uint64 child = PTE2PA(pte);
       freewalk((pagetable_t)child);
       pagetable[i] = 0;
-    }
-    else if (pte & PTE_V)
-    {
+    } else if(pte & PTE_V){
       panic("freewalk: leaf");
     }
   }
-  kfree((void *)pagetable);
+  kfree((void*)pagetable);
 }
 
 // Free user memory pages,
 // then free page-table pages.
-void uvmfree(pagetable_t pagetable, uint64 sz)
+void
+uvmfree(pagetable_t pagetable, uint64 sz)
 {
-  if (sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz) / PGSIZE, 1);
-  freewalk(pagetable);
-}
-
-// Free user memory pages,
-// then free page-table pages.
-void thread_uvmfree(pagetable_t pagetable, uint64 sz)
-{
-  if (sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz) / PGSIZE, 0);
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
   freewalk(pagetable);
 }
 
@@ -337,105 +302,45 @@ void thread_uvmfree(pagetable_t pagetable, uint64 sz)
 // physical memory.
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
-int uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+int
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
   uint64 pa, i;
   uint flags;
   char *mem;
 
-  for (i = 0; i < sz; i += PGSIZE)
-  {
-    if ((pte = walk(old, i, 0)) == 0)
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if ((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if ((mem = kalloc()) == 0)
+    if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char *)pa, PGSIZE);
-    if (mappages(new, i, PGSIZE, (uint64)mem, flags) != 0)
-    {
+    memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
     }
   }
   return 0;
 
-err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
-  return -1;
-}
-
-// Given a parent process's page table, copy
-// its memory into a child's page table.
-// Copies both the page table and the
-// physical memory.
-// returns 0 on success, -1 on failure.
-// frees any allocated pages on failure.
-int uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
-{
-  pte_t *pte;
-  uint64 pa, i;
-  uint flags;
-
-  for (i = 0; i < sz; i += PGSIZE)
-  {
-    if ((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if ((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if (mappages(new, i, PGSIZE, (uint64)pa, flags) != 0)
-    {
-      goto err;
-    }
-  }
-  return 0;
-
-err:
+ err:
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
 }
 
-int uvmrangemirror(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz)
-{
-  pte_t *pte;
-  uint64 pa, i;
-  uint flags;
-
-  oldsz = PGROUNDUP(oldsz);
-
-  for (i = oldsz; i < newsz; i += PGSIZE)
-  {
-    if ((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if ((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if (mappages(new, i, PGSIZE, (uint64)pa, flags) != 0)
-    {
-      goto err;
-    }
-  }
-  return 0;
-
-err:
-  uvmunmap(new, oldsz, i / PGSIZE, 1);
-  return -1;
-}
-
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
-void uvmclear(pagetable_t pagetable, uint64 va)
+void
+uvmclear(pagetable_t pagetable, uint64 va)
 {
   pte_t *pte;
-
+  
   pte = walk(pagetable, va, 0);
-  if (pte == 0)
+  if(pte == 0)
     panic("uvmclear");
   *pte &= ~PTE_U;
 }
@@ -443,18 +348,18 @@ void uvmclear(pagetable_t pagetable, uint64 va)
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
-int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+int
+copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
-  while (len > 0)
-  {
+  while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0)
+    if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
-    if (n > len)
+    if(n > len)
       n = len;
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
@@ -468,18 +373,18 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
-int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+int
+copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
   uint64 n, va0, pa0;
 
-  while (len > 0)
-  {
+  while(len > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0)
+    if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
-    if (n > len)
+    if(n > len)
       n = len;
     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
 
@@ -494,32 +399,28 @@ int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 // Copy bytes to dst from virtual address srcva in a given page table,
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
-int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+int
+copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
   uint64 n, va0, pa0;
   int got_null = 0;
 
-  while (got_null == 0 && max > 0)
-  {
+  while(got_null == 0 && max > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0)
+    if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
-    if (n > max)
+    if(n > max)
       n = max;
 
-    char *p = (char *)(pa0 + (srcva - va0));
-    while (n > 0)
-    {
-      if (*p == '\0')
-      {
+    char *p = (char *) (pa0 + (srcva - va0));
+    while(n > 0){
+      if(*p == '\0'){
         *dst = '\0';
         got_null = 1;
         break;
-      }
-      else
-      {
+      } else {
         *dst = *p;
       }
       --n;
@@ -530,12 +431,9 @@ int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 
     srcva = va0 + PGSIZE;
   }
-  if (got_null)
-  {
+  if(got_null){
     return 0;
-  }
-  else
-  {
+  } else {
     return -1;
   }
 }
diff --git a/user/threadmutex.c b/user/threadmutex.c
deleted file mode 100644
index 65a875c..0000000
--- a/user/threadmutex.c
+++ /dev/null
@@ -1,76 +0,0 @@
-// Mutual exclusion thread spin locks.
-
-#include "threadmutex.h"
-#include "user.h"
-
-int mutex_holding(struct thread_mutex *lk);
-
-void thread_mutex_init(struct thread_mutex *lk)
-{
-    lk->locked = 0;
-    lk->pid = 0;
-}
-
-void thread_mutex_lock(struct thread_mutex *lk)
-{
-    if (mutex_holding(lk))
-    {
-        printf("mutex request but mutex holding\n");
-    }
-
-    // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
-    //   a5 = 1
-    //   s1 = &lk->locked
-    //   amoswap.w.aq a5, a5, (s1)
-    // printf("pid %d waiting for lock\n", getpid());
-    while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
-    {
-        sleep(1);
-    }
-    // printf("pid %d got lock\n", getpid());
-
-    // Tell the C compiler and the processor to not move loads or stores
-    // past this point, to ensure that the critical section's memory
-    // references happen strictly after the lock is acquired.
-    // On RISC-V, this emits a fence instruction.
-    __sync_synchronize();
-
-    // Record info about lock acquisition for holding() and debugging.
-    lk->pid = getpid();
-}
-
-void thread_mutex_unlock(struct thread_mutex *lk)
-{
-    if (!mutex_holding(lk))
-    {
-        printf("mutex request but mutex not holding\n");
-    }
-
-    lk->pid = 0;
-
-    // Tell the C compiler and the CPU to not move loads or stores
-    // past this point, to ensure that all the stores in the critical
-    // section are visible to other CPUs before the lock is released,
-    // and that loads in the critical section occur strictly before
-    // the lock is released.
-    // On RISC-V, this emits a fence instruction.
-    __sync_synchronize();
-
-    // Release the lock, equivalent to lk->locked = 0.
-    // This code doesn't use a C assignment, since the C standard
-    // implies that an assignment might be implemented with
-    // multiple store instructions.
-    // On RISC-V, sync_lock_release turns into an atomic swap:
-    //   s1 = &lk->locked
-    //   amoswap.w zero, zero, (s1)
-    __sync_lock_release(&lk->locked);
-}
-
-// Check whether this proc is holding the lock.
-// Interrupts must be off.
-int mutex_holding(struct thread_mutex *lk)
-{
-    int r;
-    r = (lk->locked && lk->pid == getpid());
-    return r;
-}
diff --git a/user/threadmutex.h b/user/threadmutex.h
deleted file mode 100644
index d61bbbf..0000000
--- a/user/threadmutex.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef THREADMUTEXLOCK_H
-#define THREADMUTEXLOCK_H
-
-#include "kernel/types.h"
-// Mutual exclusion lock.
-struct thread_mutex
-{
-    uint8 locked;
-    int pid;
-};
-
-void thread_mutex_init(struct thread_mutex *lk);
-void thread_mutex_lock(struct thread_mutex *lk);
-void thread_mutex_unlock(struct thread_mutex *lk);
-
-#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
deleted file mode 100644
index f1958db..0000000
--- a/user/threads.c
+++ /dev/null
@@ -1,95 +0,0 @@
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "threadspinlock.h"
-#include "threadmutex.h"
-#include "user.h"
-
-struct thread_spinlock lock;
-struct thread_spinlock print_lock;
-
-struct thread_mutex mlock;
-struct thread_mutex print_mlock;
-
-struct balance
-{
-    char name[32];
-    int amount;
-};
-
-volatile int total_balance = 0;
-
-volatile unsigned int delay(unsigned int d)
-{
-    unsigned int i;
-    for (i = 0; i < d; i++)
-    {
-        __asm volatile("nop" ::
-                           :);
-    }
-
-    return i;
-}
-
-void do_work(void *arg)
-{
-    int i;
-    int old;
-
-    struct balance *b = (struct balance *)arg;
-    // thread_spin_lock(&print_lock);
-    thread_mutex_lock(&print_mlock);
-    printf("Starting do_work: s:%s\n", b->name);
-    thread_mutex_unlock(&print_mlock);
-    // thread_spin_unlock(&print_lock);
-
-    for (i = 0; i < b->amount; i++)
-    {
-        // lock and mlock will be implemented by you.
-        // thread_spin_lock(&lock);
-        thread_mutex_lock(&mlock);
-        old = total_balance;
-        delay(100000);
-        // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
-        total_balance = old + 1;
-        // thread_spin_unlock(&lock);
-        thread_mutex_unlock(&mlock);
-    }
-
-    // thread_spin_lock(&print_lock);
-    thread_mutex_lock(&print_mlock);
-    printf("Done s:%x\n", b->name);
-    thread_mutex_unlock(&print_mlock);
-    // thread_spin_unlock(&print_lock);
-
-    thread_exit();
-    return;
-}
-
-int main(int argc, char *argv[])
-{
-    thread_spin_init(&lock);
-    thread_spin_init(&print_lock);
-
-    thread_mutex_init(&mlock);
-    thread_mutex_init(&print_mlock);
-
-    struct balance b1 = {"b1", 3200};
-    struct balance b2 = {"b2", 2800};
-
-    void *s1, *s2;
-    int thread1, thread2, r1, r2;
-
-    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
-    s2 = malloc(4096);
-
-    thread1 = thread_create(do_work, (void *)&b1, s1);
-    thread2 = thread_create(do_work, (void *)&b2, s2);
-
-    r1 = thread_join(thread1);
-    r2 = thread_join(thread2);
-
-    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
-           thread1, r1, thread2, r2, total_balance);
-
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/threadspinlock.c b/user/threadspinlock.c
deleted file mode 100644
index 0b21bc6..0000000
--- a/user/threadspinlock.c
+++ /dev/null
@@ -1,74 +0,0 @@
-// Mutual exclusion thread spin locks.
-
-#include "threadspinlock.h"
-#include "user.h"
-
-int spin_holding(struct thread_spinlock *lk);
-
-void thread_spin_init(struct thread_spinlock *lk)
-{
-    lk->locked = 0;
-    lk->pid = 0;
-}
-
-void thread_spin_lock(struct thread_spinlock *lk)
-{
-    if (spin_holding(lk))
-    {
-        printf("lock request but holding\n");
-    }
-
-    // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
-    //   a5 = 1
-    //   s1 = &lk->locked
-    //   amoswap.w.aq a5, a5, (s1)
-    // printf("pid %d waiting for lock\n", getpid());
-    while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
-        ;
-    // printf("pid %d got lock\n", getpid());
-
-    // Tell the C compiler and the processor to not move loads or stores
-    // past this point, to ensure that the critical section's memory
-    // references happen strictly after the lock is acquired.
-    // On RISC-V, this emits a fence instruction.
-    __sync_synchronize();
-
-    // Record info about lock acquisition for holding() and debugging.
-    lk->pid = getpid();
-}
-
-void thread_spin_unlock(struct thread_spinlock *lk)
-{
-    if (!spin_holding(lk))
-    {
-        printf("unlock request but not holding\n");
-    }
-
-    lk->pid = 0;
-
-    // Tell the C compiler and the CPU to not move loads or stores
-    // past this point, to ensure that all the stores in the critical
-    // section are visible to other CPUs before the lock is released,
-    // and that loads in the critical section occur strictly before
-    // the lock is released.
-    // On RISC-V, this emits a fence instruction.
-    __sync_synchronize();
-
-    // Release the lock, equivalent to lk->locked = 0.
-    // This code doesn't use a C assignment, since the C standard
-    // implies that an assignment might be implemented with
-    // multiple store instructions.
-    // On RISC-V, sync_lock_release turns into an atomic swap:
-    //   s1 = &lk->locked
-    //   amoswap.w zero, zero, (s1)
-    __sync_lock_release(&lk->locked);
-}
-
-// Check whether this proc is holding the lock.
-// Interrupts must be off.
-int spin_holding(struct thread_spinlock *lk)
-{
-    int r;
-    r = (lk->locked && lk->pid == getpid());
-    return r;
-}
diff --git a/user/threadspinlock.h b/user/threadspinlock.h
deleted file mode 100644
index bef3e33..0000000
--- a/user/threadspinlock.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef THREADSPINLOCK_H
-#define THREADSPINLOCK_H
-
-#include "kernel/types.h"
-// Mutual exclusion lock.
-struct thread_spinlock
-{
-    uint8 locked;
-    int pid;
-};
-
-void thread_spin_init(struct thread_spinlock *lk);
-void thread_spin_lock(struct thread_spinlock *lk);
-void thread_spin_unlock(struct thread_spinlock *lk);
-
-#endif
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index a29474b..4d398d5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -3,42 +3,39 @@ struct stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
-int wait(int *);
-int pipe(int *);
-int write(int, const void *, int);
-int read(int, void *, int);
+int wait(int*);
+int pipe(int*);
+int write(int, const void*, int);
+int read(int, void*, int);
 int close(int);
 int kill(int);
-int exec(const char *, char **);
-int open(const char *, int);
-int mknod(const char *, short, short);
-int unlink(const char *);
-int fstat(int fd, struct stat *);
-int link(const char *, const char *);
-int mkdir(const char *);
-int chdir(const char *);
+int exec(const char*, char**);
+int open(const char*, int);
+int mknod(const char*, short, short);
+int unlink(const char*);
+int fstat(int fd, struct stat*);
+int link(const char*, const char*);
+int mkdir(const char*);
+int chdir(const char*);
 int dup(int);
 int getpid(void);
-char *sbrk(int);
+char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int thread_create(void (*fcn)(void *), void *arg, void *stack);
-int thread_join(int thread_id);
-void thread_exit(void);
 
 // ulib.c
-int stat(const char *, struct stat *);
-char *strcpy(char *, const char *);
-void *memmove(void *, const void *, int);
-char *strchr(const char *, char c);
-int strcmp(const char *, const char *);
-void fprintf(int, const char *, ...);
-void printf(const char *, ...);
-char *gets(char *, int max);
-uint strlen(const char *);
-void *memset(void *, int, uint);
-void *malloc(uint);
-void free(void *);
-int atoi(const char *);
+int stat(const char*, struct stat*);
+char* strcpy(char*, const char*);
+void *memmove(void*, const void*, int);
+char* strchr(const char*, char c);
+int strcmp(const char*, const char*);
+void fprintf(int, const char*, ...);
+void printf(const char*, ...);
+char* gets(char*, int max);
+uint strlen(const char*);
+void* memset(void*, int, uint);
+void* malloc(uint);
+void free(void*);
+int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
diff --git a/user/usys.pl b/user/usys.pl
index a334aa7..01e426e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,6 +36,3 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
-entry("thread_create");
-entry("thread_join");
-entry("thread_exit");
